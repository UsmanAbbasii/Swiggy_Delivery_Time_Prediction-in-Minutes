name: CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  CI:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Code Checkout
        uses: actions/checkout@v4

      # Step 2: Setup Python environment
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      # Step 3: Install dependencies
      - name: Install Packages
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install "dvc[dagshub]"  # Install DVC with DAGsHub support
          pip install "dvc[s3]
          pip install pytest mlflow
          

      # Step 4: Configure AWS credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      # Step 5: Pull data and models using DVC
      - name: DVC Pull
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          DAGSHUB_USER_TOKEN: ${{ secrets.DAGSHUB_TOKEN }}
        run: |
          dvc pull

      # Step 6: Test model registry
      - name: Test Model Registry
        env:
          DAGSHUB_USER_TOKEN: ${{ secrets.DAGSHUB_TOKEN }}
        run: |
          pytest tests/test_model_registry.py

      # Step 7: Test model performance
      - name: Test Model Performance
        env:
          DAGSHUB_USER_TOKEN: ${{ secrets.DAGSHUB_TOKEN }}
        run: |
          pytest tests/test_model_perf.py

      # Step 8: Promote model to production if all tests pass
      - name: Promote Model
        if: success()
        env:
          DAGSHUB_USER_TOKEN: ${{ secrets.DAGSHUB_TOKEN }}
        run: |
          python scripts/promote_model_to_prod.py
